proc binary_name_ld_lib_so { } { return "ld-foc.lib.so" }
proc binary_name_core_a    { } { return "core-foc-[board].a" }
proc binary_name_timer     { } { return "foc_timer_drv" }

proc kernel_files { } { return { foc sigma0-foc bootstrap-foc } }

proc run_boot_string { } { return "\nL4 Bootstrapper" }


proc core_link_address { } {

	if {[have_spec x86      ]}          { return "0x01100000" }
	if {[have_board  rpi      ]}        { return "0x00800000" }
	if {[have_board  rpi3     ]}        { return "0x02000000" }
	if {[have_board  pbxa9    ]}        { return "0x76000000" }
	if {[have_board  imx53_qsb]}        { return "0x70140000" }
	if {[have_board  imx6q_sabrelite ]} { return "0x14000000" }
	if {[have_board  imx7d_sabre ]}     { return "0x91000000" }

	puts stderr "Error: platform not supported, core link address unknown"
	exit 1
}


proc fiasco_serial_esc_arg { } { return "-serial_esc " }


##
# Reset the target system via the Fiasco.OC kernel debugger
#
proc reset_target { {spawn_id_arg -1} } {
	global spawn_id
	if { $spawn_id_arg == -1 } {
		set spawn_id_arg $spawn_id
	}
	send -i $spawn_id_arg "\033^^"
}


proc l4_build_dir { } { return "[pwd]/var/libcache/syscall-foc-[board]/build" }


proc kernel_binary { } { return "[pwd]/bin/foc-[board]" }


proc l4_bin_dir { } {

	if {[have_spec x86_32]}  { return "[l4_build_dir]/bin/x86_586" }
	if {[have_spec x86_64]}  { return "[l4_build_dir]/bin/amd64_K8" }
	if {[have_spec arm_v7a]} { return "[l4_build_dir]/bin/arm_armv7a" }
	if {[have_spec arm_v6]}  { return "[l4_build_dir]/bin/arm_armv6" }
	if {[have_spec arm_v8]}  { return "[l4_build_dir]/bin/arm64_armv8a" }

	puts stderr "Error: Cannot determine bin directory"
	exit 1
}


proc run_boot_dir_x86 {binaries} {

	#
	# Build kernel and dynamic linker on demand, if not yet present in
	# '[run_dir]/genode/'
	#
	set kernel_arg ""
	set ld_arg     ""
	if {![file exists [run_dir]/genode/foc]}       { set kernel_arg "kernel/foc" }
	if {![file exists [run_dir]/genode/ld.lib.so]} { set ld_arg     "lib/ld-foc" }
	set targets "$kernel_arg $ld_arg"

	if {[llength $targets]} { build $targets }

	if {$kernel_arg != ""} {
		copy_file [pwd]/bin/foc-[board]           [run_dir]/genode/foc
		copy_file [pwd]/bin/sigma0-foc-[board]    [run_dir]/genode/sigma0-foc
		copy_file [pwd]/bin/bootstrap-foc-[board] [run_dir]/genode/bootstrap-foc
	}

	build_core_image $binaries

	#
	# Move kernel files to distinct location within the boot directory so that
	# we can remove [run_dir]/genode after the core image has been built.
	#
	exec mkdir -p [run_dir]/boot
	copy_file [run_dir]/genode/foc           [run_dir]/boot/kernel
	copy_file [run_dir]/genode/sigma0-foc    [run_dir]/boot/sigma0
	copy_file [run_dir]/genode/bootstrap-foc [run_dir]/boot/bootstrap
	remove_genode_dir

	exec mv [run_dir]/image.elf [run_dir]/boot/image.elf

	if {[have_include "image/iso"] || [have_include "image/disk"]} {

		if {[have_include "image/disk"]} {
			exec mkdir -p [run_dir]/boot/grub
			exec cp [genode_dir]/tool/boot/bender [run_dir]/boot/bender
		}

		if {[have_include "image/iso"]} {
			install_iso_bootloader_to_run_dir
		}

		#
		# Generate grub config file
		#
		# The core binary is part of the 'binaries' list but it must
		# appear right after 'sigma0' as boot module. Hence the special case.
		#
		set fh [open "[run_dir]/boot/grub/grub.cfg" "WRONLY CREAT TRUNC"]
		puts $fh "set timeout=0"
		puts $fh "menuentry 'Genode on Fiasco.OC' {"
		puts $fh " insmod multiboot"
		puts $fh " multiboot /boot/bender"
		puts $fh " module /boot/bootstrap"
		puts $fh " module /boot/kernel fiasco [fiasco_serial_esc_arg]"
		puts $fh " module /boot/sigma0"
		puts $fh " module /boot/image.elf"
		puts $fh "}"
		close $fh
	}

	#
	# Build image
	#
	run_image

	if {[have_include "load/tftp"]} {
		#
		# Install PXE bootloader pulsar
		#
		install_pxe_bootloader_to_run_dir

		#
		# Generate pulsar config file
		#
		set fh [open "[run_dir]/config-52-54-00-12-34-56" "WRONLY CREAT TRUNC"]
		puts $fh " exec /boot/bender"
		puts $fh " load /boot/bootstrap"
		puts $fh " load /boot/kernel -serial_esc"
		puts $fh " load /boot/sigma0"
		puts $fh " load /boot/image.elf"
		close $fh

		generate_tftp_config
	}

	if {[have_include "load/ipxe"]} {
		create_ipxe_config
		update_ipxe_boot_dir
		create_symlink_for_iso
	}
}


proc run_boot_dir_arm { binaries } {

	global run_target

	build { lib/ld-foc kernel/foc }

	build_core_image $binaries

	#
	# Generate bootstrap config
	#
	set fh [open "[run_dir]/modules.list" "WRONLY CREAT TRUNC"]

	puts $fh "modaddr 0x01100000\n"
	puts $fh "entry    genode"
	puts $fh "kernel   [kernel_binary] [fiasco_serial_esc_arg]"
	puts $fh "roottask image.elf"
	close $fh

	set gen_img_cmd "make -C [l4_build_dir]/source O=[l4_build_dir] E=genode "
	append gen_img_cmd "MODULES_LIST=[pwd]/[run_dir]/modules.list "
	append gen_img_cmd "MODULE_SEARCH_PATH=[pwd]/[run_dir]:[pwd]:[l4_build_dir] "
	append gen_img_cmd "CROSS_COMPILE=[cross_dev_prefix] elfimage"

	set pid [eval "spawn sh -c \"$gen_img_cmd\""]
	expect { eof { } }
	if {[lindex [wait $pid] end] != 0} {
		puts stderr "Error: single-image creation failed"
		exit -4
	}

	exec mkdir -p [run_dir]/boot
	exec mv [run_dir]/image.elf [run_dir]/boot/core.elf
	exec cp [l4_bin_dir]/bootstrap.elf [run_dir]/boot/image.elf
	run_image [run_dir]/boot/image.elf

	puts "\nboot image: [run_dir]/image.elf\n"

	# install image.elf file in TFTP directory for PXE boot
	if {[have_include "load/tftp"]} {
		set tftp_base_dir [load_tftp_base_dir]
		set tftp_offset_dir [load_tftp_offset_dir]

		exec mkdir -p $tftp_base_dir$tftp_offset_dir
		exec {*}[load_tftp_inst_cmd] [pwd]/[run_dir]/boot/image.elf $tftp_base_dir$tftp_offset_dir
		if {[have_include "image/uboot"]} {
			exec {*}[load_tftp_inst_cmd] [pwd]/[run_dir]/uImage $tftp_base_dir$tftp_offset_dir/uImage
		}
	}
}


##
# Populate boot directory with binaries on fiasco.OC
#
proc run_boot_dir {binaries} {

	if {[have_spec x86]}    { return [run_boot_dir_x86 $binaries] }
	if {[have_spec arm]}    { return [run_boot_dir_arm $binaries] }
	if {[have_spec arm_64]} { return [run_boot_dir_arm $binaries] }
}


##
# Base source archive within depot
#
proc base_src { } {

	if {[have_spec   x86]}             { return base-foc-pc }
	if {[have_board  pbxa9]}           { return base-foc-pbxa9 }
	if {[have_board  rpi3]}            { return base-foc-rpi3 }
	if {[have_board  imx6q_sabrelite]} { return base-foc-imx6q_sabrelite }
	if {[have_board  imx7d_sabre]}     { return base-foc-imx7d_sabre }

	global specs

	puts stderr "Test requires base-foc kernel archive, which is missing for this build configuration"
	puts stderr "  SPECS=\"$specs\""
	exit 0
}
