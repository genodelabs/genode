

              ===============================================
              Release notes for the Genode OS Framework 15.11
              ===============================================

                               Genode Labs



; intro
; * Mention Emery's work on Nix
; * Point to USB-Armory work by mstein

;@nfeske


Genode as desktop OS
####################

Uniform run-time configuration concept
======================================

;@nfeske


GUI stack
=========

;@nfeske

commit afac1e86bb59c8c3a4a4e104601a2a223084e289
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Sep 16 23:15:17 2015 +0200

    decorator: window colors and controls
    
    This patch improves the decorator in two ways. First, it enables the
    assignment of window colors depending on the window labels. This
    configuration can be changed dynamically. Second, it adds the handling
    of window controls for closing, maximizing, minimizing windows.
    
    Issue #1689
    Fixes #1688

commit 0ab74e61d7763ba0229dd8e83fa633d0278ecc35
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Sep 29 18:49:53 2015 +0200

    wm: handle Nitpicker::Session::session_control

commit e0233604fa69da3aeeffd0a80ef67390c4cab320
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Sep 29 19:13:17 2015 +0200

    wm: handling of temporarily hidden views

commit cdb87a7c4fa104d0ed4c47ecb5d521ff54d74802
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Sep 29 19:14:21 2015 +0200

    window layouter: handle hidden windows

commit e27ebd0368d2422fb0447145910269dd4c5d6f7f
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Sep 29 20:16:28 2015 +0200

    wm/layouter: respond to external focus requests

commit 0efd908e27e19065975e0c46c794eedbc456bbec
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Sep 29 22:23:36 2015 +0200

    wm: support clients in "direct" role

commit dcc4b8c31318e785270d636fe19486aef9ccae17
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Sep 29 23:43:59 2015 +0200

    wm/layouter/decorator: propagate window controls

commit 4164c9edec5b68aa04efe850862da87a931ff7e7
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Sep 30 16:07:32 2015 +0200

    wm: allow resize requests to 0x0

commit a8cca8e1b38192ee34e5cae821315f26fd48764d
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Sep 30 16:09:03 2015 +0200

    window layouter: respond to window closer

commit 818840ca6a0e6a66ea8b1e4ddbea74329041f221
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Sep 30 17:03:41 2015 +0200

    wm: provide physical screen mode to layouter

commit 57ce50a3d42b574a6e93e2a33fccf74b1855c5b6
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Sep 30 17:42:45 2015 +0200

    window layouter: handle maximize/unmaximize

commit 7c968d4c60a230cae01e32eaa234414457313f0c
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Sep 30 11:30:02 2015 +0200

    nitpicker: externalize xray policy
    
    This patch removes the policy for controlling the X-Ray mode from
    nitpicker to the separate component os/app/xray_trigger.
    
    Fixes #1690

commit 519eb334e9e2c4718437ad1b03a8c404f626c4e6
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Oct 8 00:12:34 2015 +0200

    menu view: add hbox layout, support widget reorder
    
    This patch, complements the existing vbox layout with a hbox layout and
    improves the response to dynamic dialog updates. The new version support
    disappearing widgets and the reordering of widgets. Furthermore, this
    patch ensures that the 'Widget::_layout' functions are executed after
    updating a new version of the dialog.

commit 755d2cce056e223cdd25b7d337f0c8b3847c9aff
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Sep 29 17:17:08 2015 +0200

    gems: turn launcher into a panel-like application

commit de8a49a4b0bb77f9bf095514ce24d1fd4cafb5c9
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Nov 11 16:54:08 2015 +0100

    Window decorator that can be styled


Audio stack
===========

While working on the audio stack concering better support for audio
applications in VirtualBox we modernized the mixer component and applied
best practics on how components are configured on Genode to the mixer.

Like all other configurable components the mixer gets its configuration
via ROM module. The following configuration snippet illustrates its
structure:

! <config>
!   <default out_volume="75" volume="25" muted="0"/>
!   <channel_list>
!     <channel type="input"  label="client" number="0" volume="75" muted="1"/>
!     <channel type="input"  label="client" number="1" volume="15" muted="1"/>
!     <channel type="output" label="master" number="0" volume="100" muted="0"/>
!     <channel type="output" label="master" number="1" volume="100" muted="0"/>
!   </channel_list>
! </config>

The '<default>' node is used to set up the initial settings for new clients.
According to this configuration every new client will start with a volume
level set to 25 and is not muted. The initial output volume level is set
to 75 (the volume level ranges from 0 to 100). The '<channel_list>' node
contains all (pre-)configured channels. Each '<channel>' node has several
mandatory attributes: 'type' specifies its type and is either 'input'
or 'output', the 'label' attribute contains the label of a client for an input
node and the label 'master' for an output node, 'number' specifies the channel
number (0 for left and 1 for right), the 'volume' attribute sets the volume
level and 'muted' marks the channel as muted. In addition, there are optional
read-only channel attributes which are mainly used by the channel list report.

The mixer reports all available channels in its 'channel_list' report.
The report contains a `<channel_list>' node that is similar to the one
used in the mixer configuration:

! <channel_list>
!   <channel type="input" label="client0" name="left"  number="0" active="1" volume="100" muted="0"/>
!   <channel type="input" label="client0" name="right" number="1" active="1" volume="100" muted="0"/>
!   <channel type="input" label="client1" name="left"  number="0" active="0" volume="25"  muted="0"/>
!   <channel type="input" label="client1" name="right" number="1" active="0" volume="25"  muted="0"/>
!   <channel type="output" label="master" name="left"  number="0" active="1" volume="100" muted="0"/>
!   <channel type="output" label="master" name="right" number="1" active="1" volume="100" muted="0"/>
! </channel_list>

Each channel node features all mandatory attributes as well as a few optional
ones. The 'name' attribute contains the name of the channel. It is the
alphanumeric description of the numeric 'number' attribute. The 'active'
attribute indicates whether a channel is currently playing or not.

A 'channel_list' report may by used to create a new configuration for the
mixer. Every time the available channels change, e.g. when a new client
appears, a new report is generated by the mixer. In return this report can
then be used to configure the volume level of the new client. A new report
is also generated after a new configuration has been applied by the mixer.
Thereby a mixer agent can adapt itself to the recent changes.

As an example there is an experimental mixer agent based on Qt5
_repos/gems/src/app/mixer_gui_qt_ that processes the 'channel_list' reports
coming from the mixer. It takes the report and writes a new configuration
to the file 'mixer.config' that can then used by the mixer.

A basic scenario that uses the mixer as well as the experimental mixer agent
looks like this:

! <start name="report_rom">
!   <resource name="RAM" quantum="1M"/>
!   <provides>
!     <service name="Report"/>
!     <service name="ROM"/>
!   </provides>
!   <config>
!     <rom>
!       <policy label="mixer_gui_qt -> channel_list"
!               report="mixer -> channel_list"/>
!     </rom>
!   </config>
! </start>
!
! <start name="config_fs">
!   <binary name="ram_fs"/>
!   <resource name="RAM" quantum="1M"/>
!   <provides> <service name="File_system"/> </provides>
!   <config>
!     <policy label="config_rom" root="/"/>
!     <policy label="mixer_gui_qt -> config" root="/" writeable="yes"/>
!     <content>
!       <inline name="mixer.config">
! <config>
!   <default out_volume="100" volume="50" muted="0"/>
!   <channel_list/>
! </config>
!       </inline>
!     </content>
!   </config>
! </start>
!
! <start name="config_rom">
!   <binary name="fs_rom"/>
!   <resource name="RAM" quantum="1M"/>
!   <provides> <service name="ROM"/> </provides>
!   <route>
!     <service name="File_system"> <child name="config_fs"/> </service>
!     <any-service> <parent/> <any-child/> </any-service>
!   </route>
! </start>
!
! <start name="mixer">
!   <resource name="RAM" quantum="2M"/>
!   <provides> <service name="Audio_out"/> </provides>
!   <configfile name="mixer.config"/>
!   <route>
!     <service name="Audio_out">
!       <child name="audio_drv"/>
!     </service>
!     <service name="Report" label="channel_list">
!       <child name="report_rom"/>
!     </service>
!     <service name="ROM" label="mixer.config">
!       <child name="config_rom"/>
!     </service>
!     <any-service> <parent/> <any-child/> </any-service>
!   </route>
! </start
!
! <start name="mixer_gui_qt">
!   <resource name="RAM" quantum="32M"/>
!   <config>
!     <default out_volume="100" volume="50" muted="0"/>
!       <libc stdout="/dev/log" stderr="/dev/log">
!         <vfs>
!           <dir name="dev"> <log/> </dir>
!           <tar name="qt5_fs_mixer_gui_qt.tar"/>
!           <dir name="config"> <fs label="config"/> </dir>
!         </vfs>
!       </libc>
!   </config>
!   <route>
!     <service name="ROM" label="channel_list">
!       <child name="report_rom" />
!     </service>
!     <any-service> <parent/> <any-child/> </any-service>
!   </route>
! </start>

In addition to the mixer and mixer agent this scenario features a few more
components. We therefore also discuess their roles. In this scenario the
mixer component gets its configuration from the 'config_rom' component and
reports its channel list to the 'report_rom' component. The mixer agent
accesses the channel list report as ROM module provided by the 'report_rom'
component. It writes the configuration to the file _/config/mixer.config_
which is provided by the 'config_fs' component. The 'config_rom' component
exports each file as ROM module. One of those modules is the 'mixer.config'
that is used by the mixer component. Every time the configuration file is
altered the mixer will receive a signal, will reload the configuration and
will adapt itself accordingly. In return the mixer will send a new report
everytime its channel list changes. This report is used by the mixer agent
to adjust itself, i.e., display or remove a client widget. By moving a
slider a user can generate a new configuration.


Copy and paste
==============

;@nfeske

commit 59014a50f1283d41b7f870a78f9bf35adcc162be
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Sep 23 17:08:53 2015 +0200

    os: new clipboard component and test
    
    Fixes #1712

commit 1460105f71357092c9f92166bdad32df74a08e47
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Sep 24 14:48:08 2015 +0200

    nitpicker: provide user activity in focus reports
    
    This patch supplements the existing focus reports with the new attribute
    'active', which indicates recent user activity when set to "yes". This
    information is consumed by the clipboard to dynamically adjust its
    information-flow policy depending on the user activity.
    
    Issue #1712


Graceful exiting of subsystems
==============================

;@nfeske

commit 0f052357ef8e0a36dd931b17ae749cf9885ed2b8
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Sep 15 18:16:31 2015 +0200

    init: propagate exit conditions of children
    
    This patch extends the configuration concept of init with an additional
    sub node for the <start> node:
    
    <start name="noux">
      <exit propagate="yes"/>
      ...
    </start>
    
    If the 'propagate' attribute is set to "yes", the exit of the respective
    child will appear to init's parent as the exit of the entire init
    subsystem.
    
    Fixes #1686

commit 20f961cbd8666fba6ae7c014c687e5f453645e59
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Sep 15 15:37:42 2015 +0200

    cli_monitor, launcher: handle exiting subsystems
    
    Until now, the CLI monitor and the laucher allowed the user to explitly
    kill subsystems but both used to ignore gracefully exiting subsystems.
    It was the user's job to remove the remains of those subsystems. The
    patch takes the burden of manually killing exited subsystems from the
    user.
    
    Fixes #1685


Base framework and low-level OS infrastructure
##############################################

Changes at the system-integration level
=======================================

Label-dependent session routing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Access-control policies in Genode systems are based on session labels.
When a server receives the request for a new session, it receives the
session label along with the request.

A session label is a string that is assembled by the components that are
involved with routing the session request from the client along the branches
of the component tree to the server. The client may specify the least
significant part of the label by itself. This part gives the parent a hint to
for routing the request. For example, a client may create two file-system
sessions, one labeled with "home" and one labeled with "bin". The parent may
take this information into account for routing the individual requests to
different file-system servers. The label is successively superseded (prefixed)
by additional parts along the chain of components on the route of the session
request. The first part of the label is the most significant part as it is
imposed by the component in the intermediate proximity of the server. The last
part is the least trusted part of the label because it originated from the
client. Once the session request arrives at the server, the server takes the
session label as the key to select a server-side policy.

Whereas the use of session labels for selecting server-side policies has
been a common practice for a long time, label-dependent session routing
was rarely needed. In most cases, routing decisions were simply based on
the type of the requested sessions. However, Genode's system scenarios get
more sophisticated label-dependent routing becomes increasingly important.
As we wished to express the criterion of routing decisions and the
server-side policy selection in a uniform way, we introduced the following
common label-matching rules.

Both a '<service>' node in init's routing configuration as well as a
'<policy>' node as the server's configuration can be equipped with the
following attributes to match session labels:

:'label="<string>"': The session label must perfectly match the specified
  string.

:'label_prefix="<string>"': The first part of the label must match the
  specified string.

:'label_suffix="<string>"': The last part of the label must match the
  specified string.

If no attributes are present, the route/policy matches. The attributes can be
combined. If any of the specified attributes mismatch, the route/policy is
discarded.

If multiple '<service>' nodes match in init's routing configuration, the
first matching rule is taken. So the order is the nodes is important.

If multiple '<policy>' nodes match at the server side, the most specific
policy is selected. Exact matches are considered as most specific,
prefixes as less specific, and suffixes as least specific. If multiple
prefixes or suffixes match, the longest is considered as the most specific.

*Note* This change requires slight adaptations of exiting configurations
because the semantics of the original 'label' attribute of server-side policy
nodes has changed. Originally, the attribute value was taken as a prefix for
matching the session label. Now, the attribute would be taken as a perfect
match. The adaptation of existing configurations is as simple as replacing
"label" by "label_prefix". Since the change tightens the semantics of the
label attribute, it will not weaken the security of existing policies. In the
worst case, a server will reject sessions that formerly worked, but not vice
versa.


New VFS server component
~~~~~~~~~~~~~~~~~~~~~~~~

;@emery

commit b6c558dce961075248c497307bdb8ce751c156fa
Author: Emery Hemingway <emery@vfemail.net>
Date:   Fri Sep 4 16:06:03 2015 +0200

    Vfs: File_system server backed by VFS library
    
    Test available at libc_vfs_fs.
    
    Fixes #1648


New VFS-local symlink file system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;@emery

commit 7ce19216f4aa290e17527982f611d97fd17b2181
Author: Emery Hemingway <emery@vfemail.net>
Date:   Fri Aug 21 21:55:33 2015 +0200

    VFS: symlink file system
    
    add symlinks to a VFS tree with <symlink name="..." target="..."/>
    
    Issue #1648
    Fixes #1653


New file-system server for aggregating LOG data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;@emery

commit ce1e6c16fb785208d99fea735369e5722dfe3633
Author: Emery Hemingway <emery@vfemail.net>
Date:   Sat May 23 23:33:24 2015 +0200

    fs_log: new log file server using native FS sessions
    
    Fixes #1538


New ROM logger component
~~~~~~~~~~~~~~~~~~~~~~~~

The new ROM logger component located at _os/src/app/rom_logger/_ is a simple
utility to monitor the content of a ROM module. It is meant to be used for
test automation and during debugging. Each time, the monitored ROM module
changes, the ROM logger prints its content to the LOG.


New ROM filter component
~~~~~~~~~~~~~~~~~~~~~~~~

The new ROM filter component located at _os/src/server/rom_filter/_ provides a
ROM module that depends on the content of other ROM modules. Its designated
use is the dynamic switching between configuration variants dependent on the
state of the system. For example, the configuration of the window decorator
may be toggled depending on whether nitpicker's X-ray mode is active or not.


*Configuration*

The configuration consists of two parts. The first part is the declaration of
input values that are taken into the account. The input values are obtained
from ROM modules that contain XML-formatted data. Each input value is
represented by an '<input>' node with a unique 'name' attribute. The 'rom'
attribute specifies the ROM module to take the input from. If not specified,
the 'name' is used as the ROM name. The type of the top-level XML node can be
specified via the 'node' attribute. If not present, the top-level XML node is
expected to correspond to the 'name' attribute.

The second part of the configuration defines the output via an '<output>' node.
The type of the top-level XML node must be specified via the 'node' attribute.
The '<output>' node can contain the following sub nodes:

:'<inline>':
  Contains content to be written to the output.

:'<if>':
  Produces output depending on a condition (see below). If the condition
  is satisfied, the '<then>' sub node is evaluated. Otherwise, the '<else>'
  sub node is evaluated. Each of those sub nodes can contain the same
  nodes as the '<output>' node.


*Conditions*

The '<has_value>' condition compares an input value (specified as 'input'
attribute) with a predefined value (specified as 'value' attribute). The
condition is satisfied if both values are equal.


*Example*

For an example that illustrates the use of the component, please refer to the
_os/run/conditional_rom.run_ script.


Source-code reorganization
==========================

;@skalk

Coherent directory structure of spec-dependent source codes

commit ed52d5a2119559050ac5e2f81ba6b4f4fa03e9bd
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Thu Sep 3 14:55:05 2015 +0200

    Introduce 'spec' subdirectories to outline aspects
    
    Instead of holding SPEC-variable dependent files and directories inline
    within the repository structure, move them into 'spec' subdirectories
    at the corresponding levels, e.g.:
    
      repos/base/include/spec
      repos/base/mk/spec
      repos/base/lib/mk/spec
      repos/base/src/core/spec
      ...
    
    Moreover, this commit removes the 'platform' directories. That term was
    used in an overloaded sense. All SPEC-relative 'platform' directories are
    now named 'spec'. Other files, like for instance those related to the
    kernel/architecture specific startup library, where moved from 'platform'
    directories to explicit, more meaningful places like e.g.: 'src/lib/startup'.
    
    Fix #1673


API-level changes
=================

String and XML-handling utilities
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*String parsing*

The new overloads of the 'ascii_to' function for 'bool' and 'uint64_t' allow
the use easy extraction of such values from XML nodes and session-argument
strings.


*XML node content sanitizing*

The introduction of the clipboard component called for a way to embed and
extract data (like clipboard content) from untrusted sources into an XML node
without breaking the XML structure.

The embedding of such data is accommodated by the new 'append_sanitized'
method of the 'Xml_generator'. For the extraction of such data from XML nodes,
we added corresponding accessor methods ('decoded_content') to the 'Xml_node'.


*Generalized session-label and session-policy utilities*

The utilities provided by _os/session_policy.h_ used to be tailored for the
matching of session arguments against a server-side policy configuration.
However, the policy-matching part is useful in other situations, too. Hence,
we removed the tight coupling with the session-argument parsing (via
Arg_string) and the hard-wired use of 'Genode::config()'.

To make the utilities more versatile, the 'Session_label' has become a
'Genode::String' (at the time when we originally introduced the
'Session_label', there was no 'Genode::String'). The parsing of the session
arguments happens in the constructor of this special 'String'. The constructor
of 'Session_policy' now takes a 'Genode::String' as argument. So it can be
used with the 'Session_label' but also with other 'String' types. Furthermore,
the implicit use of 'Genode::config()' can be overridden by explicitly
specifying the config node as an argument.

The common problem of scoring XML nodes against a given label, label prefix,
and label suffix as explained in Section [Label-dependent session routing] is
addressed by the new 'Xml_node_label_score' utility. It is used by the init
component to take routing decisions and by servers to select policies
dependent on session labels.


VFS and file-system API
~~~~~~~~~~~~~~~~~~~~~~~

;@emery

commit 1779a0511b5221ceaaedeac94b22b3f32000da19
Author: Emery Hemingway <emery@vfemail.net>
Date:   Thu Oct 1 11:53:00 2015 +0200

    vfs: add new error codes
    
    The codes are OPEN_ERR_NAME_TOO_LONG, OPEN_ERR_NO_SPACE, and
    FTRUNCATE_ERR_NO_SPACE.
    
    Issue #1693


commit 2da239d0c8efd2e14a76afa6e0baae9edd1664be
Author: Emery Hemingway <emery@vfemail.net>
Date:   Wed Oct 7 17:02:52 2015 +0200

    void sync(char const *path)
    
    Sync now takes a path argument at VFS and File system interfaces.
    
    Issue #1648

commit 48fd034cfeb4648b975d4f7dbec50c9e42032c11
Author: Emery Hemingway <emery@vfemail.net>
Date:   Wed Oct 7 18:31:52 2015 +0200

    New session arguments at File_system connection
    
    Session root and writeablity may be specified at the session
    convenience constructor.
    
    Issue #1648


*Removal of 'Packet_ref' from 'File_system::Packet_descriptor'*

The intention of Packet_ref was to allow clients to place opaque
references into the packet descriptor itself, which could be observed on
packet completion. Currently no component in our sources uses this
feature and beyond that it is questionable if it should be used at all:
If the server tampers with the ref the client may easily be confused
into observing an incorrect or invalid context. It seems better to
remove the opaque context from the descriptor and leave the actual
implementation to the client and its needs.


Object-pool redesign
~~~~~~~~~~~~~~~~~~~~

;@skalk

commit 458b4d6fc4711f2503618eff5bd4f6558a34a844
Author: Stefan Kalkowski <stefan.kalkowski@genode-labs.com>
Date:   Mon Aug 10 13:34:16 2015 +0200

    base: redesign object pool using lambda interface
    
    Instead of returning pointers to locked objects via a lookup function,
    the new object pool implementation restricts object access to
    functors resp. lambda expressions that are applied to the objects
    within the pool itself.
    
    Fix #884
    Fix #1658


Handling sub-page resources in 'Attached_io_mem_dataspace'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On some hardware platforms, memory-mapped registers of different devices
happen to be co-located at the same physical memory page. Since memory-mapped
I/O resource can be handed out to drivers drivers only at the granularity
of 4K pages, drivers had to deal with sub-page register offsets as special
cases. To remove this burden from the driver developers, the
'Attached_io_mem_dataspace' has been changed to accept physical addresses
at byte granularity and hands out the corresponding virtual addresses
including the sub-page offset transparently for the driver.




Libraries, applications, and runtime environments
#################################################

Qt5 improvements
================

Key repeat
~~~~~~~~~~

Key repeat now works in Qt applications.

Clipboard support
~~~~~~~~~~~~~~~~~

Qt applications can use the new clipboard component if this feature is
enabled in the application's configuration:

<config clipboard="yes">

VirtualBox
==========

;@alexab
;@cnuke

commit b6c440852b6fc9670a30ad8494eeea24109371d7
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Fri Aug 28 10:35:42 2015 +0200

    vbox: allocate guest memory in chunks
    
    Fixes #1575

commit 6f3e9c12fbb59c6123aa8e1d9c492a3dbe2ec6d7
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Fri Sep 18 16:15:43 2015 +0200

    vbox: support shutdown of VMM
    
    - send exit signal to parent
    - avoid assertion in vbox posix backend
    
    Fixes #1687

commit 5aec67d5bb5c8c593a1637692ad8ac1c47ec4c0d
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Tue Sep 15 14:08:35 2015 +0200

    vbox: enable clipboard support"
    
    Fixes #1696

While debugging load problems within VirtualBox we observed that
the running Windows 8 guest VM did generate a lot of VM exits by
using the 'rdtsc' instruction very frequently. Since this instruction
gets trapped it can create a huge load in the VM that amongst other
can influence audio playback/recording in a bad way (e.g. distorted
sounds and the like). As a interim solution we have disabled the
virtualization of the 'rdtsc' instruction completely. As long as each
guest VM runs on its own CPU core that is fine as there should not be
that much interference (i.e., TSC warping).

However, building a more robust solution regarding TSC warping and
drifting requires more evaluation which we will conduct in future.


Safe VM shutdown when closing the framebuffer window
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When using VirtualBox with the window manager, clicking the window close
button initiates an ACPI shutdown of the VM, which allows the guest
operating system to quit safely.

64-bit guest operating system support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

VirtualBox can now run 64-bit guest operating systems. For Windows guests,
only one guest CPU is supported at the moment.

Seoul VMM
=========

;@alexab

commit 2d15c6d99043d81ab40510d43e7361ecb002b264
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Wed Sep 9 16:50:58 2015 +0200

    seoul: handle a MSR to let Genode/Nova guest boot
    
    Issue #1702

commit e5ea76c689a9dd06d446b555b7ea91fab1ae6d76
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Wed Sep 9 21:17:10 2015 +0200

    seoul: set vCPU priority below seoul threads
    
    Issue #1702

commit 4da7e89d6b5caadd9038e4e31384a0ade184563a
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Thu Sep 10 12:46:33 2015 +0200

    seoul: avoid assertion, adhere to original vancouver version
    
    Issue #1702

commit 21e86227bca3a9d0943a70bf1e8b6328c94385c7
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Fri Sep 11 16:56:37 2015 +0200

    seoul: make input available via bios
    
    Enables us to interact with GRUB bootloader during early boot.
    
    Issue #1702

commit 36947cef3a9979dbe1613f29d799de6cb8997f04
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Sun Sep 6 11:24:42 2015 +0200

    seoul: fix raw disc boot for 512B sectorsize
    
    Fixes #1702

commit f7ad6cf4e6d797fc2f581703a43430d06d5966f3
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Wed Sep 9 23:38:07 2015 +0200

    seoul: support ide disk model
    
    Issue #1702


Device drivers
##############

Intel-KMS framebuffer driver
============================

;@skalk


Framebuffer support for Exynos 4
================================

The existing framebuffer driver for the Samsung Exynos 5 SoC has been
generalized to also cover the Exynos 4 SoC, specifically the ODROID-x2
platform. Thanks to Alexy Gallardo Segura for this contribution.


AHCI support for ATA devices with no native command queuing
===========================================================

Up to now Genode's AHCI driver supported hard disks that offered the native
command queuing feature (NCQ) only. While NCQ vastly improves the performance of
a hard disk, some drives simply do not support this feature. Therefore, we
extended the AHCI driver and enabled NCQ detection during device initialization.
If a device does not support NCQ, the driver programs the controller accordingly
during block requests.


Intel wireless stack
====================

As an artefact from the initial porting effort the wlan driver used a
device whitelist because it would scan the PCI bus in an suboptimal way
Since it would take a long time to iterate of all possible matches in the
drivers ID table we reduced the list to only the device we know would
work with the driver. With this release we addressed this issue eventually
and got rid of the device whitelist.

We also refined the driver in the way it searches for networks. Prior to
the change it was not possible to connect to a network with an hidden SSID.
Now it works without any complications.


ACPI driver improvements
========================

;@alexab

commit 74e89727ee6c442b5f612d4d7e669b7ea998d1a3
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Thu Nov 5 11:12:38 2015 +0100

    acpi - report rmrr via acpi report rom
    
    Issue #1764


SD-card driver for i.MX53
=========================

;@mstein

commit 1315af8ef348f86fd4d80bdf33ccd6e845522b69
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Tue Jun 9 15:56:20 2015 +0200

    sd_card & imx53: install IRQ signal handler
    
    Previously, it was not necessary to acknowledge an IRQ initially before using
    it. However, since the IRQ framework changed lately it is. Adapt to this.
    
    Ref #1497

commit 4361f9f62dd307dfe3c5158cbc3ba04ccda71e44
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Thu Oct 22 15:05:02 2015 +0200

    sd_card & imx53: fix initialization problem on QSB
    
    On i.MX53 QSB, a "Send Op Cond" command during the driver initialization
    returns another response value than on the USB Armory. As the check for
    this response seems to have no relevance for the driver functionality (Linux
    reads the value from MMIO but I can't find a place in the source code where
    it is used), we simply remove it.
    
    Ref #1497

commit 3a0f2d60ce257395159b8f814ea0d0eacf150dbe
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Thu Oct 22 16:29:02 2015 +0200

    sd_card & imx53: flush ADMA2 writes via DSB
    
    We have to issue a data synchronization barrier after writing a ADMA2
    table to ensure that the corresponding write commands were actually
    executed before issuing the SD command.
    
    Ref #1497

commit 44514cef5bd70f3a5e79db7b3f5943b2332d92af
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Thu Oct 22 16:57:03 2015 +0200

    sd_card & imx53: simplify IRQ handler
    
    Less switch cases.
    
    Ref #1497

commit 036feee36dc37c979e7a003e7d0f69e5061ce67b
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Thu Oct 22 17:06:00 2015 +0200

    sd_card & imx53: fix multiblock write termination
    
    The manual termination of multi-block writes via "Stop Transmission" commands
    seems to leave the card in a busy state sometimes. This causes errors on
    subsequent commands. Thus, we have to synchronize manually with the
    card-internal state via "Send State" commands. Additionally, the method
    for issuing the manual "Stop Transmission" commands was refined.
    
    Ref #1497

commit 95c3fe60adceeca9e3a3246ee876ed3d58aee038
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Thu Oct 22 17:50:56 2015 +0200

    sd_card & imx53: set ADMA entry size more clean
    
    Less heuristics.
    
    Ref #1497

commit 4d706b7073142063b7ab9b946c6ee53846486570
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Thu Oct 22 18:17:41 2015 +0200

    sd_card & imx53: refactor and clean-up
    
    Move ADMA2 stuff to extra header and unit. Move ESDHCv2 implementations to
    extra unit. Use exceptions instead of error codes. Clean-up documentation.
    
    Ref #1497


Network driver for Zynq-7000 platform
=====================================

commit 4a593d0d3fc29dbc523a6769d9a8c1083d1a7cae
Author: Timo Wischer <t.wischer@tu-bs.de>
Date:   Thu Sep 3 12:52:28 2015 +0200

    nic: support Zynq-7000
    
    Ref #1667

Platforms
#########

Execution on bare hardware (base-hw)
====================================

Xilinx Zynq-7000
~~~~~~~~~~~~~~~~

;@mstein

commit 40b31876d27dd6143bdad65acda8ef244e7c3d50
Author: Johannes Schlatow <schlatow@ida.ing.tu-bs.de>
Date:   Wed Sep 2 13:59:31 2015 +0200

    base-hw: Add basic Zynq-7000 support (QEMU)
    
    Ref #1599

commit be994641efd79e061bcb750614875456e2adf164
Author: Johannes Schlatow <schlatow@ida.ing.tu-bs.de>
Date:   Wed Sep 2 14:03:22 2015 +0200

    timer: Add Zynq-7000 support (QEMU)
    
    Ref #1599


Physical memory detection on the 64-bit x86 architecture
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;@alexab

commit 826c81ac180e5b868e6f42928fa0c5fbf55f88c0
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Tue Oct 27 14:26:40 2015 +0100

    hw_x86: discover all physical memory in core
    
    Fixes #1741


Improved TrustZone support on USB Armory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;@mstein

commit 1c78196c4e8b329eee13c0ebd4c22092437047fc
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Mon Nov 2 14:36:01 2015 +0100

    hw & imx53: IRQ injection via Vm::proceed
    
    Enhance the VM state, that can be accessed by a VMM, by a member
    'unsigned irq_injection'. In Kernel::Vm::proceed check, whether
    irq_injection is set.  If so, check whether irq_injection is a
    non-secure IRQ.  If so, let the PIC raise this IRQ in the VM and reset
    irq_injection.
    
    Ref #1497

commit c909821ca8535efff529bb583293e53257f5b096
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Mon Nov 2 14:29:04 2015 +0100

    hw & imx53: kernel Trustzone config for USB armory
    
    On the USB Armory, we want to secure different devices than on other i.MX53
    implementations. Thus, add a board specific configuration that is interpreted
    by the kernel Trustzone initialization.
    
    Ref #1497

commit 21427ca612180e73b2084fd4501206370e51a42f
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Mon Nov 2 14:34:49 2015 +0100

    TZ VMM & USB Armory: Demo
    
    * Provide paravirtualized block API for accessing the second partition
      of the block device that is provided by the ESDHC driver.
    
    * Provide paravirtualized serial API for sending log-output over Genodes
      serial port.
    
    * Use the latest Linux suggested in the USB Armory Wiki [1] when on USB Armory
      while still using the older vendor Linux when on i.MX53 QSB. I.e.,
      provide a device tree through RAM and a rootfs through the paravirtualized
      block device when on USB Armory while providing ATAGs and Initrd when on
      i.MX53 QSB.
    
    * Switch on the LED on the USB Armory when the VMM catches a VM-exception
      and switch it off again when as soon as the exception is handled. This
      merely show-cases the ability to instrument the LED for such purposes. In an
      ideal world, the LED is switched on as long as we're on the "Secure Side"
      and switched off as long as we're not.
    
    * For further information see repos/os/run/tz_vmm.run
    
    [1] https://github.com/inversepath/usbarmory/wiki/Preparing-a-bootable-microSD-image
    
    Fixes #1497


NOVA
====

;@alexab

commit 2e62543fdb02a17f7fc263a4de6830a749973e10
Author: Alexander Boettcher <alexander.boettcher@genode-labs.com>
Date:   Tue Sep 29 22:03:03 2015 +0200

    nova: use remote revoke
    
    Fixes #1733


Tools and build system
======================

Run-tool support for booting via the iPXE boot loader
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[http://ipxe.org - iPXE] is an open source network boot firmware which
supports booting from a web server
[http://ipxe.org/howto/chainloading#breaking_the_loop_with_an_embedded_script - via HTTP]. 

With the new load module at _tool/run/load/ipxe_, Genode's run tool has become
able to load images via iPXE/HTTP to the test hardware. The following two
parameters can be used to specify the iPXE/HTTP setup:

:--load-ipxe-base-dir:
  This parameter specifies the base directory of the HTTP server, from
  which the target machine downloads the files.

:--load-ipxe-boot-dir:
  The directory relative to iPXE base dir which contains the iPXE
  chainload configuration and all necessary files.

The target machine is expected to request the following iPXE configuration via
HTTP:

! http://${HOST_URL}/${ipxe-boot-dir}/boot.cfg

This can be achieved by building iPXE with the following embedded script:

! #!ipxe
! dhcp
! chain http://${HOST_URL}/${ipxe-boot-dir}/boot.cfg

In addition to loading an image, an iPXE boot configuration is required to
boot the loaded image on the target machine. The run-tool back ends for NOVA,
Fiasco.OC, and L4/Fiasco have been enhanced to automatically generate such
configurations, which use the [http://ipxe.org/cmd/sanboot - sanboot command]
to download and boot an ISO image via HTTP. To use this boot method, your
RUN_OPT configuration must specify both the ISO-image and the iPXE-load
modules:

! RUN_OPT +=  --include image/iso --include load/ipxe

Note that the webserver serving the ISO image must support
[http://forum.ipxe.org/showthread.php?tid=7295&pid=10482#pid10482 - ranged requests].

Thanks to Adrian-Ken Rueegsegger for these improvements!


Tool for creating U-Boot images for Genode's supported platforms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;@mstein

commit 2d9d55a6d35ae63d42f098aea44b121cf4c89d03
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Thu Oct 1 13:25:19 2015 +0200

    tool: create_uboot
    
    To make the creation of a bootstrap medium for most ARM platforms more
    comfortable this tool shall bundle all the different U-Boot source
    states, patches, and MMC preparation rules that we gathered over the
    year for that purpose. As input, the tool merely needs the targeted
    platform (analogous to the platform parameter of 'create_builddir'). By
    now, 'hw_wand_quad' is the only supported platform. Further platforms
    can be added successively. As output, the tool creates a head image file
    of small size (8MiB) that can be copied (dd) with offset 0 to the MMC.
    
    Fixes #1730

commit be0b969ace9a4f979288af3c05b5b5869518a703
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Fri Nov 13 13:35:22 2015 +0100

    create_uboot: support for hw_usb_armory
    
    The platform name 'hw_usb_armory' targets Genode scenarios with base-hw
    as kernel and the Inversepath USB-Armory as target hardware.
    
    Ref #1497

commit c82ed69af1f6072d1871f6db4e73021228cbabe5
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Fri Nov 13 13:28:22 2015 +0100

    create_uboot: spare out first 1K of target medium
    
    This enables installation of the bootloader image without wiping the
    partition table which is needed at least for the tz_vmm tutorial with
    hw_usb_armory.
    
    Ref #1497


Removal of deprecated features
##############################

The development of the *Codezero* kernel came to a halt several years ago, its
supported hardware platforms are outdated, and there is no active community of
users. We still kept the platform on life support by the means of nightly
build tests and sporadic runtime tests. However, because each non-trivial
change of kernel-dependent code required us to spend energy on the kernel to
no apparent benefit, we finally dropped it.

We introduced the *lx_hybrid* base platform to ease the building of Genode
completely with the Linux host tools and linked to the host libc. With this
feature, we tried to accommodate the use of Genode as component middleware on
top of regular Linux distributions. For quite some time, however, this feature
remained unused. So we the lx_hybrid special case and the corresponding
always_hybrid spec value.

