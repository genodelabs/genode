#
# \brief  Fiasco-specific test-environment supplements
# \author Norman Feske
# \author Christian Helmuth
# \date   2010-08-26
#
# This file is meant to be used as '--include' argument for 'tool/run'.
#


##
# Install files needed to boot via PXE
#
proc install_pxe_bootloader_to_run_dir { } {
	exec cp [genode_dir]/tool/boot/pulsar [run_dir]/boot/pulsar
}


##
# Read the location of the Fiasco user directory from 'etc/fiasco.conf'
#
proc l4_dir { } {
	global _l4_dir

	if {![info exists _l4_dir]} {
		if {[file exists etc/fiasco.conf]} {
			set _l4_dir [exec sed -n "/^L4_BUILD_DIR/s/^.*=\\s*//p" etc/fiasco.conf]
			if {[file exists $_l4_dir]} { return $_l4_dir }
		}

		set _l4_dir "[pwd]/l4"
		if {![file exists $_l4_dir]} {
			puts -nonewline stderr "Error: Could neither find the L4 build directory "
			puts -nonewline stderr "within '<genode-build-dir>/l4' nor at a location "
			puts -nonewline stderr "specified via 'L4_BUILD_DIR = <l4v2-build-dir>' "
			puts            stderr "in <genode-build-dir>/etc/fiasco.conf'."
			exit 1
		}
	}
	return $_l4_dir
}


##
# Return whether the l4-buid-directory is provided from the outside
#
proc l4_dir_external { } {
	if {[l4_dir] == "[pwd]/l4"} { return 0 }
	return 1
}


##
# Return the location of the Fiasco kernel
#
proc fiasco { } {
	return [kernel_location_from_config_file etc/fiasco.conf [pwd]/kernel/fiasco/fiasco]
}


##
# Return whether fiasco kernel is provided from the outside
#
proc fiasco_external { } {
	if {[fiasco] == "[pwd]/kernel/fiasco/fiasco"} { return 0 }
	return 1
}


##################################
## Test framework API functions ##
##################################

proc create_boot_directory { } {
	exec rm -rf   [run_dir]
	exec mkdir -p [run_dir]/genode
	exec mkdir -p [run_dir]/fiasco
}

proc bin_dir { } {
	if {[have_spec x86_32]}  { return "[l4_dir]/bin/x86_586" }

	puts stderr "Error: Cannot determine bin directory"
	exit 1
}

set fiasco_serial_esc_arg "-serial_esc "

proc build_boot_image {binaries} {

	global fiasco_serial_esc_arg

	#
	# Collect contents of the ISO image
	#
	copy_and_strip_genode_binaries_to_run_dir $binaries

	if {![fiasco_external]} { build { kernel } }
	if {![l4_dir_external]} { build { bootstrap sigma0 } }

	# assert existence of the L4 build directory
	l4_dir

	puts "using fiasco kernel [fiasco]"
	exec cp [fiasco] [run_dir]/fiasco/fiasco
	puts "using sigma0/bootstrap at [l4_dir]"
	exec cp [bin_dir]/l4v2/sigma0 [run_dir]/fiasco
	exec cp [bin_dir]/bootstrap [run_dir]/fiasco

	install_iso_bootloader_to_run_dir

	#
	# Generate grub config file
	#
	# The core binary is part of the 'binaries' list but it must
	# appear right after 'sigma0' as boot module. Hence the special case.
	#
	set fh [open "[run_dir]/boot/grub/menu.lst" "WRONLY CREAT TRUNC"]
	puts $fh "timeout 0"
	puts $fh "default 0"
	puts $fh "\ntitle Genode on L4/Fiasco"
	puts $fh " kernel /fiasco/bootstrap -serial -modaddr=0x02000000"
	puts $fh " module /fiasco/fiasco -serial -jdb_cmd=JH $fiasco_serial_esc_arg"
	puts $fh " module /fiasco/sigma0"
	puts $fh " module /genode/core"
	puts $fh " module /genode/config"
	foreach binary $binaries {
		if {$binary != "core"} {
			puts $fh " module /genode/$binary" } }
	puts $fh " vbeset 0x117 506070"
	close $fh

	#
	# Install PXE bootloader pulsar
	#
	install_pxe_bootloader_to_run_dir

	create_iso_image_from_run_dir

	#
	# Generate pulsar config file
	#
	set fh [open "[run_dir]/config-52-54-00-12-34-56" "WRONLY CREAT TRUNC"]
	puts $fh " exec /fiasco/bootstrap -serial -modaddr=0x02000000"
	puts $fh " load /fiasco/fiasco -serial -serial_esc -jdb_cmd=JH"
	puts $fh " load /fiasco/sigma0"
	puts $fh " load /genode/core"
	puts $fh " load /genode/config"
	foreach binary $binaries {
		if {$binary != "core"} {
			puts $fh " load /genode/$binary" } }
	close $fh
 
	#
	# Generate pulsar config file pointing to the config file above.
	#
	if {[info exists ::env(PXE_TFTP_DIR_BASE)] && [info exists ::env(PXE_TFTP_DIR_OFFSET)]} {
		set len [string length $::env(PXE_TFTP_DIR_BASE)]
		set tmp [string range [pwd] 0 $len-1]
		# if PXE_TFTP_DIR_BASE is part of pwd (autopilot) we don't need DIR_OFFSET
		if ([string match $tmp $::env(PXE_TFTP_DIR_BASE)]) {
			set tftp_local_offset [string range [pwd] $len [string length [pwd]]]
		} else {
			set tftp_local_offset $::env(PXE_TFTP_DIR_OFFSET)
		}

		set fh [open "$::env(PXE_TFTP_DIR_BASE)$::env(PXE_TFTP_DIR_OFFSET)/config-00-00-00-00-00-00" "WRONLY CREAT TRUNC"]
		puts $fh " root $tftp_local_offset/[run_dir]"
		puts $fh " config config-52-54-00-12-34-56"
		close $fh
	}
}


proc run_genode_until {{wait_for_re forever} {timeout_value 0} {running_spawn_id -1}} {
	#
	# If a running_spawn_id is specified, wait for the expected output
	#
	if {$running_spawn_id != -1} {
		wait_for_output $wait_for_re $timeout_value $running_spawn_id
		return
	}

	#
	# Try to use one of the supported backends for running the scripts
	#
	if {[is_amt_available]} {
		spawn_amt $wait_for_re $timeout_value
		return
	}
	if {[is_qemu_available]} {
		spawn_qemu $wait_for_re $timeout_value
		return
	}

	global run_target
	puts stderr "Error: Can't execute automatically on target '$run_target'"
	exit -1
}
