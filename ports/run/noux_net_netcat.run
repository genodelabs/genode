if {[have_spec linux]} {
	puts "\nLinux not supported because of missing UART driver\n"
	exit 0
}

build {
	core init
	drivers/timer drivers/uart drivers/nic drivers/pci
	noux/net lib/libc_noux
	noux-pkg/gnu-netcat
}

exec tar cfv bin/noux_netcat.tar -h -C bin/netcat .

#
# The '<build-dir>/bin/etc/' directory is expected to contain the
# files 'services', 'protocols', 'hosts', and 'resolv.conf'.
# Download these files from the FreeBSD source tree is possible.
#
exec mkdir -p bin/etc
set freebsd_url "http://svn.freebsd.org/base/release/8.2.0/etc"
foreach etc_file { services protocols hosts } {
	if {![file exists bin/etc/$etc_file]} {
		catch { exec wget -c -P bin/etc $freebsd_url/$etc_file } } }
exec touch bin/etc/resolv.conf

exec tar rfv bin/noux_netcat.tar -h -C bin/ etc

create_boot_directory

append config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="LOG"/>
		<service name="CAP"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="PD"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <any-child/> <parent/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="uart_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Terminal"/></provides>
		<config>
		<policy label="noux" uart="1"/>
		</config>
	</start>
	<start name="nic_drv">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="Nic"/> </provides>
	</start>}

append_if [have_spec pci] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="PCI"/> </provides>
	</start>}
	
append config {
	<start name="noux_net">
		<resource name="RAM" quantum="1G"/>
		<config>
			<fstab> <tar name="noux_netcat.tar" at="/"/> </fstab>
			<start name="/bin/netcat">
				<arg value="-l"/>
				<arg value="-p 5555"/>
			</start>
		</config>
	</start>
</config>
}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer uart_drv nic_drv
	ld.lib.so noux_net libc.lib.so libm.lib.so
	libc_noux.lib.so lwip.lib.so noux_netcat.tar
}

# platform-specific modules
lappend_if [have_spec pci] boot_modules pci_drv

build_boot_image $boot_modules

#
# Redirect the output of Noux via the virtual serial port 1 into a file to be
# dumped after the successful completion of the test.
#
set noux_output_file "noux_output.log"

append qemu_args " -nographic"
append qemu_args " -serial mon:stdio"
append qemu_args " -serial file:$noux_output_file"

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

append qemu_args " -net user -redir tcp:5555::5555 "

run_genode_until {.*got IP address.*\n} 60

sleep 2

exec echo -e "Hello Genode" | netcat localhost 5555

sleep 1

set output [exec cat $noux_output_file]

puts "output:\n$output\n"

exec rm bin/noux_netcat.tar
exec rm -r bin/etc
exec rm $noux_output_file

if {![regexp {Hello Genode} $output dummy]} {
	puts stderr "Error: output not as expected"
	exit 1
}

puts "Test succeeded"
exit 0
