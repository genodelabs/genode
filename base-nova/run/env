#
# \brief  NOVA-specific test-environment supplements
# \author Norman Feske
# \date   2010-08-31
#
# This file is meant to be used as '--include' argument for 'tool/run'.
#

##
# Install files needed to boot via PXE
#
proc install_pxe_bootloader_to_run_dir { } {
	exec cp [genode_dir]/tool/boot/pulsar [run_dir]/boot/pulsar
	exec cp [genode_dir]/tool/boot/bender [run_dir]/boot/bender
}

##
# Read the location of the NOVA kernel directory from 'etc/nova.conf'
#
proc nova_kernel { } {
	global _nova_kernel

	if {![info exists _nova_kernel]} {
		if {[file exists etc/nova.conf]} {
			set _nova_kernel [exec sed -n "/^NOVA_KERNEL/s/^.*=\\s*//p" etc/nova.conf]
		} else {
		        set _nova_kernel "[pwd]/kernel/hypervisor"
		}
	}
	return $_nova_kernel
}

##
# Return whether nova is provided from the outside
#
proc nova_external { } {
	if {[nova_kernel] == "[pwd]/kernel/hypervisor"} { return 0 }
	return 1
}

##################################
## Test framework API functions ##
##################################

proc create_boot_directory { } {
	exec rm -rf   [run_dir]
	exec mkdir -p [run_dir]/genode
}


proc build_boot_image {binaries} {

	#
	# Collect contents of the ISO image
	#
	copy_and_strip_genode_binaries_to_run_dir $binaries

	if {![nova_external] && ![file exists [nova_kernel]]} { build { kernel } }

	puts "using NOVA kernel at [nova_kernel]"
	exec objcopy -O elf32-i386 [nova_kernel] [run_dir]/hypervisor

	install_iso_bootloader_to_run_dir

	#
	# The core binary is part of the 'binaries' list but it must
	# appear right after 'sigma0' as boot module. Hence the special case.
	#
	# Generate grub config file
	#
	set fh [open "[run_dir]/boot/grub/menu.lst" "WRONLY CREAT TRUNC"]
	puts $fh "timeout 0"
	puts $fh "default 0"
	puts $fh "\ntitle Genode on NOVA"
	puts $fh " kernel /boot/bender"
	puts $fh " module /hypervisor iommu serial"
	puts $fh " module /genode/core"
	puts $fh " module /genode/config"
	foreach binary $binaries {
		if {$binary != "core"} {
			puts $fh " module /genode/$binary" } }
	close $fh

	install_pxe_bootloader_to_run_dir
	create_iso_image_from_run_dir

	#
	# Generate pulsar config file
	#
	set fh [open "[run_dir]/config-52-54-00-12-34-56" "WRONLY CREAT TRUNC"]
	puts $fh " exec /boot/bender"
	puts $fh " load /hypervisor iommu serial"
	puts $fh " load /genode/core"
	puts $fh " load /genode/config"
	foreach binary $binaries {
		if {$binary != "core"} {
			puts $fh " load /genode/$binary" } }
	close $fh

	#
	# Generate pulsar config file pointing to the config file above.
	#
	if {[info exists ::env(PXE_TFTP_DIR_BASE)] && [info exists ::env(PXE_TFTP_DIR_OFFSET)]} {
		set len [string length $::env(PXE_TFTP_DIR_BASE)]
		set tmp [string range [pwd] 0 $len-1]
		# if PXE_TFTP_DIR_BASE is part of pwd (autopilot) we don't need DIR_OFFSET
		if ([string match $tmp $::env(PXE_TFTP_DIR_BASE)]) {
			set tftp_local_offset [string range [pwd] $len [string length [pwd]]]
		} else {
		    set tftp_local_offset $::env(PXE_TFTP_DIR_OFFSET)
		}

		set fh [open "$::env(PXE_TFTP_DIR_BASE)$::env(PXE_TFTP_DIR_OFFSET)/config-00-00-00-00-00-00" "WRONLY CREAT TRUNC"]
		puts $fh " root $tftp_local_offset/[run_dir]"
		puts $fh " config config-52-54-00-12-34-56"
		close $fh
	}
}


proc run_genode_until {{wait_for_re forever} {timeout_value 0} {running_spawn_id -1}} {
	#
	# If a running_spawn_id is specified, wait for the expected output
	#
	if {$running_spawn_id != -1} {
		wait_for_output $wait_for_re $timeout_value $running_spawn_id
		return
	}

	#
	# Try to use one of the supported backends for running the scripts
	#
	if {[is_amt_available]} {
		spawn_amt $wait_for_re $timeout_value
		return
	}
	if {[is_qemu_available]} {
		spawn_qemu $wait_for_re $timeout_value
		return
	}
}
