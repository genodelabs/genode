assert_spec foc
assert_spec 32bit

#
# Build
#
set build_components {
	core
	init
	drivers/timer
	drivers/uart
	drivers/framebuffer
	l4linux }

set use_usb_driver   [expr [have_spec omap4] || [have_spec arndale]]
set use_nic_driver   [expr !$use_usb_driver && [expr [have_spec lan9118] || [have_spec x86]]]

if {[expr !$use_usb_driver && !$use_nic_driver]} {
	puts "\n Run script is not supported on this platform. \n"; exit 0 }

lappend_if $use_usb_driver  build_components drivers/usb
lappend_if $use_nic_driver  build_components drivers/nic
lappend_if [have_spec  ps2] build_components drivers/input/spec/ps2
lappend_if [have_spec gpio] build_components drivers/gpio

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Config
#
set config  {
<config prio_levels="2">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="kdb_uart_drv">
		<resource name="RAM" quantum="1M"/>
		<provides>
			<service name="Terminal"/>
			<service name="Uart"/>
		</provides>
		<config><policy label="l4linux" uart="0"/></config>
	</start> }

append_platform_drv_config

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
	</start> }

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append_if [have_spec gpio] config {
	<start name="gpio_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Gpio"/></provides>
		<config/>
	</start>}

append_if $use_usb_driver config {
	<start name="usb_drv">
		<resource name="RAM" quantum="12M"/>
		<provides>
			<service name="Nic"/>
			<service name="Input"/>
		</provides>
		<config uhci="yes" ehci="yes">
			<nic mac="02:00:00:00:01:01"/>
			<hid />
		</config>
	</start>}

append_if $use_nic_driver config {
	<start name="nic_drv">
		<resource name="RAM" quantum="3M"/>
		<provides><service name="Nic"/></provides>
	</start> }

append config {
	<start name="l4linux">
		<resource name="RAM" quantum="128M"/> }

append_if [have_spec x86] config {
		<config args="mem=64M l4x_rd=initrd.gz l4x_cpus=2 l4x_cpus_map=0,1"/> }

append_if [have_spec arm] config {
		<config args="mem=64M l4x_rd=initrd.gz"/> }

append config {
	</start>
</config> }

install_config $config

#
# Boot modules
#
set boot_modules { core init timer kdb_uart_drv l4linux initrd.gz }
lappend_if [have_spec         ps2] boot_modules ps2_drv
lappend_if [have_spec framebuffer] boot_modules fb_drv
lappend_if $use_nic_driver         boot_modules nic_drv
lappend_if $use_usb_driver         boot_modules usb_drv
lappend_if [have_spec gpio]        boot_modules gpio_drv

if {[have_spec x86]} {
	set uri "http://genode.org/files/release-11.11/l4lx/initrd-ia32.gz"
} elseif {[have_spec arm]} {
	set uri "http://genode.org/files/release-11.11/l4lx/initrd-arm.gz"
}
if {![file exists bin/initrd.gz]} {
	puts "Download initramfs ..."
	exec >& /dev/null wget -c -O bin/initrd.gz $uri
}
exec >& /dev/null wget -O bin/initrd.gz.md5 $uri.md5
cd bin
exec md5sum -c initrd.gz.md5
cd ..

append_platform_drv_boot_modules

build_boot_image  [join $boot_modules " "]

#
# Qemu
#
append qemu_args " -m 160 -nographic "
append qemu_args " -serial mon:stdio "
append_if [have_spec     x86] qemu_args " -smp 2,cores=2 "
append_if [have_spec     x86] qemu_args " -net nic,model=e1000 -net user "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 -net user "

#
# Execute test case
#
run_genode_until {.*\/ #.*} 220
set serial_id [output_spawn_id]

# Wait for network to settle down
send -i $serial_id "sleep 5\n"
send -i $serial_id "wget http://genode.org/\n"

run_genode_until "Connecting to genode.org.*index.html.*\/ #.*" 30 $serial_id

exec rm bin/initrd.gz bin/initrd.gz.md5
