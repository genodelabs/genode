create_boot_directory

install_config {
	<config>

		<parent-provides>
			<service name="CPU"/>
			<service name="IO_MEM"/>
			<service name="IO_PORT"/>
			<service name="IRQ"/>
			<service name="LOG"/>
			<service name="PD"/>
			<service name="RM"/>
			<service name="ROM"/>
		</parent-provides>
		<default-route>
			<any-service> <parent/> <any-child/> </any-service>
		</default-route>
		<default caps="200"/>

		<start name="timer">
			<resource name="RAM" quantum="1M"/>
			<provides> <service name="Timer"/> </provides>
		</start>

		<start name="vfs_block">
			<resource name="RAM" quantum="68M" />
			<provides><service name="Block"/></provides>
			<config>
				<vfs>
					<ram/>
					<import>
						<rom name="disk_image_copy" label="disk_image"/>
					</import>
				</vfs>
				<policy label_prefix="vfs"
				        file="/disk_image_copy"
				        block_size="512"
				        writeable="yes"/>
			</config>
		</start>

		<start name="dynamic_rom">
			<resource name="RAM" quantum="4M"/>
			<provides><service name="ROM"/> </provides>
			<config>
				<rom name="remote_state">
					<inline>Well, so far.</inline>
					<sleep milliseconds="360000000"/>
				</rom>
			</config>
		</start>

		<start name="vfs">
			<resource name="RAM" quantum="30M"/>
			<provides> <service name="File_system"/> </provides>
			<config>
				<vfs>
					<ram/>
					<dir name="my_dir">
						<fatfs/>
						<rom name="my_ro_state" label="remote_state"/>
					</dir>
					<import>
						<rom name="my_rw_state" label="remote_state"/>
					</import>
				</vfs>
				<policy label_prefix="vfs_example_10" root="/" writeable="yes"/>
			</config>
			<route>
				<service name="ROM" label="remote_state">
					<child name="dynamic_rom"/>
				</service>
				<any-service> <parent/> <any-child/> </any-service>
			</route>
		</start>

		<start name="vfs_example_10">
			<resource name="RAM" quantum="2M"/>
			<config>
				<vfs>
					<fs/>
					<dir name="dev"> <log/> </dir>
				</vfs>
				<libc stdout="/dev/log"/>
			</config>
			<route>
				<service name="File_system">
					<child name="vfs"/>
				</service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

	</config>
}

set mkfs_cmd [installed_command mkfs.vfat]
if {[catch { exec which $mkfs_cmd } ]} {
	puts stderr "Error: $mkfs_cmd not installed, aborting test";
	exit }

set disk_image "bin/disk_image"
set cmd "dd if=/dev/zero of=$disk_image bs=1024 count=65536"
puts "creating disk image: $cmd"
catch { exec sh -c $cmd }

set cmd "$mkfs_cmd -F32 -nlibc_vfs $disk_image"
puts "formating disk: $cmd"
catch { exec sh -c $cmd }

build {
	core init timer app/vfs_example_10 server/vfs_block lib/vfs_fatfs
	lib/vfs_import server/vfs server/dynamic_rom }

build_boot_image {
	disk_image core ld.lib.so init timer vfs_example_10 vfs_block vfs
	vfs_import.lib.so vfs.lib.so vfs_fatfs.lib.so libc.lib.so libm.lib.so
	posix.lib.so dynamic_rom }

append qemu_args " -nographic "

run_genode_until "exited with exit value 0.*\n" 30

exec rm -f $disk_image
