#
# Build
#

if {[have_spec hw_odroid_xu]} {
	puts "Run script not supported on this platform."; exit 0 }

set build_components {
	core init
	drivers/timer
	server/nitpicker
	server/dynamic_rom
	drivers/framebuffer drivers/input
	app/trace_subject_reporter
	app/cpu_load_display
	app/cpu_burner
}

lappend_if [have_spec usb]              build_components drivers/usb
lappend_if [have_spec gpio]             build_components drivers/gpio

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config prio_levels="2">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
		<service name="TRACE"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>}

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_platform_drv_config

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
		<config buffered="yes"/>
	</start>}

append_if [have_spec gpio] config {
	<start name="gpio_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Gpio"/></provides>
		<config/>
	</start>}

append_if [have_spec imx53] config {
	<start name="input_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
		<config/>
	</start> }

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start>}

append_if [expr ![have_spec ps2] && [have_spec usb]] config {
	<start name="usb_drv">
		<resource name="RAM" quantum="12M"/>
		<provides><service name="Input"/></provides>
		<config ehci="yes" uhci="yes" xhci="no"> <hid/> </config>
	</start> }

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="nitpicker">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Nitpicker"/></provides>
		<config>
			<domain name="default"   layer="2" />
			<policy label=""                domain="default"/>
		</config>
	</start>
	<start name="report_rom">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Report"/>
			<service name="ROM"/>
		</provides>
		<config>
			<rom>
				<policy label="cpu_load_display -> trace_subjects"
				        report="trace_subject_reporter -> trace_subjects"/>
			</rom>
		</config>
	</start>
	<start name="trace_subject_reporter" >
		<resource name="RAM" quantum="6M"/>
		<config period_ms="500">
			<report activity="yes" affinity="yes"/>
		</config>
		<route>
			<any-service> <child name="report_rom"/> <any-child/> <parent/> </any-service>
		</route>
	</start>
	<start name="cpu_load_display">
		<resource name="RAM" quantum="6M"/>
		<route>
			<any-service> <child name="report_rom"/> <any-child/> <parent/> </any-service>
		</route>
	</start>
	<start name="dynamic_rom">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="ROM"/></provides>
		<config verbose="yes">
			<rom name="cpu_burner1.config">
				<inline description="initial state">
					<config percent="5"/>
				</inline>
				<sleep milliseconds="5000" />
				<inline description="50%">
					<config percent="50" />
				</inline>
				<sleep milliseconds="5000" />
			</rom>
			<rom name="cpu_burner2.config">
				<inline description="initial state">
					<config percent="5"/>
				</inline>
				<sleep milliseconds="4800" />
				<inline description="100%">
					<config percent="70" />
				</inline>
				<sleep milliseconds="2700" />
			</rom>
		</config>
	</start>
	<start name="cpu_burner.1">
		<binary name="cpu_burner"/>
		<resource name="RAM" quantum="1M"/>
		<configfile name="cpu_burner1.config"/>
		<route>
			<any-service> <child name="dynamic_rom"/> <any-child/> <parent/> </any-service>
		</route>
	</start>
	<start name="cpu_burner.2">
		<binary name="cpu_burner"/>
		<resource name="RAM" quantum="1M"/>
		<configfile name="cpu_burner2.config"/>
		<route>
			<any-service> <child name="dynamic_rom"/> <any-child/> <parent/> </any-service>
		</route>
	</start>
</config>}

install_config $config

# copy backdrop PNG images to bin directory
foreach file { genode_logo.png grid.png } {
	file copy -force [genode_dir]/repos/gems/src/app/backdrop/$file bin/ }


#
# Boot modules
#

# generic modules
set boot_modules {
	core init
	timer
	nitpicker report_rom dynamic_rom
	cpu_load_display cpu_burner trace_subject_reporter
}

# platform-specific modules
append_platform_drv_boot_modules

lappend_if [have_spec linux]            boot_modules fb_sdl
lappend_if [have_spec ps2]              boot_modules ps2_drv
lappend_if [have_spec framebuffer]      boot_modules fb_drv
lappend_if [have_spec usb]              boot_modules usb_drv
lappend_if [have_spec gpio]             boot_modules gpio_drv
lappend_if [have_spec imx53]            boot_modules input_drv

build_boot_image $boot_modules

append qemu_args " -m 256 "
append qemu_args " -smp 4,cores=4 "

run_genode_until forever
