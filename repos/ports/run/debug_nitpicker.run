#
# \brief  Example for debugging a service
# \author Norman Feske
# \date   2011-09-13
#
# This example shows how GDB monitor can be used to debug a Genode service.
# GDB monitor sits in between the service and the service's parent. Any
# service announcements are transparently propagated through the GDB
# monitor to the parent. This way, the internal state of a service can
# be observed at any time via a remote GDB connection. In the example,
# the remote GDB connection is realized via an UART device. Alternatively,
# 'tcp_terminal' could be used (to attach GDB via a network connection).
#

#
# Build
#

set build_components {
	core init
	drivers/timer drivers/uart
	app/gdb_monitor
	test/gdb_monitor
	server/nitpicker app/pointer app/scout
	drivers/framebuffer drivers/input
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

set config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="uart_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Terminal"/> </provides>
		<config>
			<policy label="gdb_monitor" uart="1"/>
		</config>
	</start>
	<start name="gdb_monitor">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="Nitpicker"/></provides>
		<config>
			<target name="nitpicker">
				<config>
					<domain name="pointer" layer="1" xray="no" origin="pointer" />
					<domain name="default" layer="3" />
					<policy label="pointer" domain="pointer"/>
					<default-policy domain="default"/>
				</config>
			</target>
			<preserve name="RAM" quantum="2M"/>
			<libc stdout="/dev/log" stderr="/dev/log">
				<vfs> <dir name="dev"> <log/> </dir> </vfs>
			</libc>
		</config>
	</start>
	<start name="pointer">
		<resource name="RAM" quantum="1M"/>
	</start>
	<start name="scout">
		<resource name="RAM" quantum="32M"/>
	</start>}

append_platform_drv_config

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append config {
</config>
}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer
	ld.lib.so libc.lib.so libc_pipe.lib.so libc_terminal.lib.so
	uart_drv
	gdb_monitor
	nitpicker pointer scout
}

# platform-specific modules
lappend_if [have_spec framebuffer] boot_modules fb_drv
lappend_if [have_spec         ps2] boot_modules ps2_drv

append_platform_drv_boot_modules

build_boot_image $boot_modules

#
# Execute test case
#
#
set local_port 5555

# qemu config
append qemu_args " -m 128 "

# connect comport 0 to stdio
append qemu_args " -serial mon:stdio "

# connect comport 1 with TCP port $local_port
append qemu_args " -serial chardev:uart "
append qemu_args " -chardev socket,id=uart,port=$local_port,host=localhost,server,nowait,ipv4 "

run_genode_until {.*\[init -> gdb_monitor\].*} 30

puts "GDB monitor is up, starting GDB in a new terminal"

exec [terminal] -e "[gdb] bin/nitpicker -ex \"target remote localhost:$local_port\"" &

interact -i [output_spawn_id]

# vi: set ft=tcl :
