create_boot_directory

build { noux-pkg/less noux-pkg/sed noux-pkg/grep noux-pkg/tar noux-pkg/diffutils noux-pkg/findutils noux-pkg/which }

import_from_depot genodelabs/src/[base_src] \
                  genodelabs/pkg/[drivers_interactive_pkg] \
                  genodelabs/src/init \
                  genodelabs/src/libc \
                  genodelabs/src/noux \
                  genodelabs/src/terminal \
                  genodelabs/src/posix \
                  genodelabs/src/ncurses \
                  genodelabs/src/vim \
                  genodelabs/src/bash \
                  genodelabs/src/coreutils \
                  genodelabs/src/ram_fs

# write default vimrc file
set vimrc_fd [open [run_dir]/genode/vimrc w]
puts $vimrc_fd {
set noloadplugins
set hls
set nocompatible
set laststatus=2
set noswapfile
set viminfo=}
close $vimrc_fd

install_config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="LOG"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="PD"/>
		<service name="IRQ"/>
		<service name="IO_PORT"/>
		<service name="IO_MEM"/>
	</parent-provides>

	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="drivers" caps="1000">
		<resource name="RAM" quantum="32M" constrain_phys="yes"/>
		<binary name="init"/>
		<route>
			<service name="ROM" label="config"> <parent label="drivers.config"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
		<provides>
			<service name="Input"/> <service name="Framebuffer"/>
		</provides>
	</start>

	<start name="terminal">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Terminal"/></provides>
		<config>
			<keyboard layout="none"/>
			<font size="12" />
		</config>
	</start>

	<start name="ram_fs">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<!-- preload RAM file system with some ROM images -->
			<content>
				<dir name="tmp">
					<rom name="init" as="blubb" />
				</dir>
				<dir name="home">
					<dir name="user">
						<!-- just a place holder -->
						<rom name="timer" />
						<inline name="diff_me_a.txt">
Hello world ?!
						</inline>
						<inline name="diff_me_b.txt">
Hello world !!
						</inline>
					</dir>
				</dir>
			</content>
			<!-- constrain sessions according to their labels -->
			<policy label="noux -> root" root="/" />
			<policy label="noux -> home" root="/home/user" writeable="yes" />
			<policy label="noux -> tmp"  root="/tmp"       writeable="yes" />
		</config>
	</start>

	<start name="noux" caps="1000">
		<resource name="RAM" quantum="1G" />
		<config>
			<fstab>
				<tar name="coreutils.tar" />
				<tar name="vim.tar" />
				<tar name="bash.tar" />
				<tar name="less.tar" />
				<tar name="sed.tar" />
				<tar name="grep.tar" />
				<tar name="tar.tar" />
				<tar name="findutils.tar" />
				<tar name="diffutils.tar" />
				<tar name="which.tar" />

				<!-- Example of how to impose policy onto a file system
				     session. The label attached to the 'fs' node is used
				     as a key to select the policy of 'ram_fs' -->

				<dir name="home"> <fs label="home" /> </dir>
				<dir name="share"> <dir name="vim"> <rom name="vimrc"/> </dir> </dir>

				<!-- The entirety of ram_fs is mounted within the '/ram'
				     directory. -->

				<dir name="ram"> <fs label="root" /> </dir>
				<dir name="tmp"> <fs label="tmp" /> </dir>

				<dir name="dev">
					<zero/> <null/>
				</dir>
			</fstab>
			<start name="/bin/bash">
				<env name="TERM" value="linux" />
			</start>
		</config>
	</start>
</config>}

build_boot_image { sed.tar less.tar grep.tar findutils.tar diffutils.tar tar.tar which.tar pcre.lib.so }

run_genode_until forever
