diff --git src/lib/acpica/source/include/acpixf.h src/lib/acpica/source/include/acpixf.h
index 3a823a3..abc2900 100644
--- src/lib/acpica/source/include/acpixf.h
+++ src/lib/acpica/source/include/acpixf.h
@@ -137,7 +137,7 @@
  * 5) Allow unresolved references (invalid target name) in package objects
  * 6) Enable warning messages for behavior that is not ACPI spec compliant
  */
-ACPI_INIT_GLOBAL (UINT8,            AcpiGbl_EnableInterpreterSlack, FALSE);
+ACPI_INIT_GLOBAL (UINT8,            AcpiGbl_EnableInterpreterSlack, TRUE);
 
 /*
  * Automatically serialize all methods that create named objects? Default
diff --git src/lib/acpica/source/include/platform/acenv.h src/lib/acpica/source/include/platform/acenv.h
index 1ab311d..514b144 100644
--- src/lib/acpica/source/include/platform/acenv.h
+++ src/lib/acpica/source/include/platform/acenv.h
@@ -239,7 +239,15 @@
 
 /* Unknown environment */
 
-#error Unknown target environment
+#ifdef __x86_64__
+#define ACPI_MACHINE_WIDTH 64
+#else
+#define ACPI_MACHINE_WIDTH 32
+#define ACPI_USE_NATIVE_DIVIDE
+#endif
+
+/* required for va_arg - otherwise below some alternative is defined */
+#include <stdarg.h>
 #endif
 
 /*! [End] no source code translation !*/
diff --git src/lib/acpica/source/include/platform/acgcc.h src/lib/acpica/source/include/platform/acgcc.h
index 584d50f..c1224fb 100644
--- src/lib/acpica/source/include/platform/acgcc.h
+++ src/lib/acpica/source/include/platform/acgcc.h
@@ -60,7 +60,9 @@ typedef __builtin_va_list       va_list;
 #endif
 #endif
 
+#ifndef ACPI_INLINE
 #define ACPI_INLINE             __inline__
+#endif
 
 /* Function name is used for debug output. Non-ANSI, compiler-dependent */
 
diff --git src/lib/acpica/source/components/utilities/utclib.c b/acpica-5c1c548586f9a754f192a04b7931acabeb4c7239.memset_fix/src/lib/acpica/source/components/utilities/utclib.c
index 25c20fa..00b44d5 100644
--- src/lib/acpica/source/components/utilities/utclib.c
+++ src/lib/acpica/source/components/utilities/utclib.c
@@ -232,6 +232,11 @@
  *
  ******************************************************************************/
 
+/*
+ * The compiler attribute is required to prevent the generation of a 'memset()'
+ * call in the 'while' loop with gcc 10.
+ */
+__attribute((optimize("no-tree-loop-distribute-patterns")))
 void *
 memset (
     void                    *Dest,
