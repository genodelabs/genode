source ${genode_dir}/repos/libports/run/qt5_common.inc

#
# Build
#

append build_components [qt5_build_components feature]

append build_components {
	server/loader
	server/tar_rom
	test/nitpicker
	test/qt5/qpluginwidget
}

build $build_components

create_boot_directory

#
# Create Qt tar archive
#

create_qt5_fs_tar_archive "test-qpluginwidget" "gui"

#
# Generate config
#

append config {
<config>
	<parent-provides>}
append config [qt5_parent_provides feature]
append config {
	</parent-provides>
	<default-route>
		<any-service> <parent/> <child name="wm"/> <any-child/> </any-service>
	</default-route>}

append config [qt5_start_nodes feature]

append config {
	<start name="loader">
		<resource name="RAM" quantum="8M"/>
		<provides><service name="Loader"/></provides>
	</start>
	<start name="test-qpluginwidget">
		<resource name="RAM" quantum="30M"/>
		<config>
			<libc stdout="/dev/log" stderr="/dev/log">
				<vfs>
					<dir name="dev"> <log/> </dir>
					<tar name="qt5_fs_test-qpluginwidget.tar"/>
				</vfs>
			</libc>
		</config>
	</start>
</config>
}

install_config $config

#
# Boot modules
#

exec sh -c "ln -sf ../test/qt5/qpluginwidget/test-plugin.tar bin/"

append boot_modules [qt5_boot_modules feature]

append boot_modules {
	loader
	tar_rom
	testnit
	test-qpluginwidget
	freetype.lib.so
	gallium.lib.so
	icu.lib.so
	ld.lib.so
	libc.lib.so
	libc_pipe.lib.so
	libcrypto.lib.so
	libm.lib.so
	libpng.lib.so
	libssl.lib.so
	jpeg.lib.so
	pthread.lib.so
	qt5_core.lib.so
	qt5_gui.lib.so
	qt5_qnitpickerviewwidget.lib.so
	qt5_qpluginwidget.lib.so
	qt5_widgets.lib.so
	qt5_xml.lib.so
	qt5_network.lib.so
	zlib.lib.so
	test-plugin.tar
	stdcxx.lib.so
	qt5_fs_test-qpluginwidget.tar
}

build_boot_image $boot_modules

append qemu_args " -m 256"

run_genode_until forever

